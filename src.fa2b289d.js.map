{"version":3,"sources":["logger.ts","index.ts"],"names":[],"mappings":"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","file":"src.fa2b289d.js","sourceRoot":"../src","sourcesContent":["export const Logger = ({ logLevel }) => {\n  return {\n    debug: (context, ...msg) => {\n      if (logLevel.includes(\"debug\")) console.log(`[${context}]`, ...msg);\n    },\n  };\n};\n","import { Logger } from \"./logger\";\nconst synth = window.speechSynthesis;\n\nconst getLogLevel = () => {\n  const debugMode = localStorage.getItem(\"debug\");\n  if (debugMode || process.env.NODE_ENV === \"development\") {\n    return [\"debug\"];\n  }\n  return [];\n};\n\nconst logger = Logger({ logLevel: getLogLevel() });\n\nconst State = (initalState = {}) => {\n  let state = initalState;\n  return {\n    set: (update) => {\n      state = { ...state, ...update };\n      return state;\n    },\n    get: (): any => state,\n  };\n};\n\n(() => {\n  const state = State();\n\n  const handleVoiceSelect = (voice) => {\n    logger.debug(\"voice selected\", voice);\n    state.set({ voice });\n  };\n\n  const handleSpeakButtonClick = () => {\n    const textEl = document.getElementById(\"text\") as any;\n    if (!textEl.value) return;\n    const { voice } = state.get();\n    if (!voice) return;\n    speak(voice, textEl.value);\n  };\n\n  const handleError = (err) => {\n    renderErrorMessage(err.message);\n    renderErrorMessage(\"try this app in chrome\");\n  };\n\n  document.getElementById(\"speak-btn\").onclick = () => handleSpeakButtonClick();\n\n  setTimeout(() => {\n    logger.debug(\"voice options\", \"render start\");\n    renderVoiceOptions({\n      onSelect: handleVoiceSelect,\n      onError: handleError,\n      initial: 0,\n    });\n  }, 10);\n})();\n\nfunction speak(voice, text) {\n  logger.debug(\"speak\", { text, voice });\n  synth.cancel();\n  const utterance = new SpeechSynthesisUtterance(text);\n  utterance.voice = voice;\n  synth.speak(utterance);\n}\n\nfunction renderVoiceOptions({ onSelect, onError, initial }) {\n  const voices = synth.getVoices();\n  if (!voices.length) {\n    return onError({ message: \"no voices available\" });\n  }\n  const options = voices.map((voice, i) => ({ text: voice.name, value: i }));\n\n  const selectEl = document.getElementById(\"voices\");\n\n  setSelectOptions(selectEl, options);\n\n  selectEl.onchange = (e) => {\n    onSelect(voices[e.target[\"value\"]]);\n  };\n\n  if (initial !== undefined) {\n    logger.debug(\"initial voice\", voices[initial]);\n    onSelect(voices[initial]);\n  }\n}\n\nfunction setSelectOptions(selectEl, options) {\n  options.forEach((option) => {\n    const optionEl = document.createElement(\"option\");\n    optionEl.value = option.value;\n    optionEl.text = option.text;\n    selectEl.appendChild(optionEl);\n  });\n}\n\nfunction renderErrorMessage(message) {\n  alert(message);\n}\n"]}